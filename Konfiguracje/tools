cos tu dopisalem
I. JENKINS
Based on :
https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+RedHat+distributions
https://www.youtube.com/watch?v=RR0LabeUQ88 -> konfiguracja
http://stackoverflow.com/questions/8639501/jenkins-could-not-run-git
1. Pobrać plik z http://pkg.jenkins-ci.org/redhat/
2. Z prawami roota instalujemy Jenkins : sudo yum install jenkins
3.START/STOP/RESTART - sudo service jenkins start/stop/restart
4.Z poziomu przeglądarki : localhost:8080
5.Konfiguracja współpracy Jenkinsa z GIT i GERRIT
a. z poziomu przeglądarki localhost:8080.
b. zarządzaj dodatkami
c. Dodać pluginy:
- SCM API Plugin
- Gerrit Trigger
- GITHub Plugin
- GitHub API PLugin
- GIT client plugin
- GIT Plugin
- oraz te :https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin z dependencies
6. IMPORTANT links:
https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+RedHat+distributions
http://pkg.jenkins-ci.org/redhat/
http://www.infoq.com/articles/Gerrit-jenkins-hudson
*********************************************************
Jenkins
https://www.youtube.com/watch?v=PklYO2vYIfc
http://systemsarchitect.net/continuous-integration-for-php-with-jenkins/
http://jenkins-php.org/integration.html
1. sudo yum update
2. install Jenkins
a. Pobrać plik z http://pkg.jenkins-ci.org/redhat/
b. Z prawami roota instalujemy Jenkins : sudo yum install jenkins
c. START/STOP/RESTART - sudo service jenkins start/stop/restart
lub /etc/init.d/jenkins stop/start
3. Zaaktualizowac pluginy w Jenkins:http://localhost:8080/pluginManager/advanced i kliknąc "Check Now" na dole strony.
4. Dodać pluginy:
- SCM API Plugin
- Gerrit Trigger
- GITHub Plugin
- GitHub API PLugin
- GIT client plugin
- GIT Plugin
- oraz te :https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin z dependencies
5. sprawdzenie IP maszyny 
sudo cat /etc/hosts
6. Wykonanie poleceń (uwaga to jest dla projektów PHP, wiec wystarczy zainstalowac pkt. a,b,c):
http://systemsarchitect.net/continuous-integration-for-php-with-jenkins/
a. $ wget http://localhost:8080/jnlpJars/jenkins-cli.jar
# install dependencies for the template
b. $ java -jar jenkins-cli.jar -s http://localhost:8080 install-plugin checkstyle cloverphp dry htmlpublisher jdepend plot pmd violations xunit
c. $ java -jar jenkins-cli.jar -s http://localhost:8080 safe-restart
d. $ sudo apt-get install curl
# install the template
e. $ curl https://raw.github.com/sebastianbergmann/php-jenkins-template/master/config.xml | java -jar jenkins-cli.jar -s http://localhost:8080 create-job php-template
f. $ java -jar jenkins-cli.jar -s http://localhost:8080 safe-restart
7. Go to:
cd /var/lib/jenkins/jobs -> pokazuje joby jenkinsa, dobrze jest najpierw stworzyc job w jenkinsie np. test i tam powinien on sie pokazać
8. będąc w powyższym katalogu robimy:
sudo chown -R jenkins:jenkins test
9. Update jenkinsa:
a. Pobrac update w postaci pliku jenkins.war
b.scp /home/maciej/Pobrane/jenkins.war /lib/jenkins -> przeniesienie pobranego pliku jenkins.war z katalogu pobrane do katalogu /lib/jenkins
c. http://localhost:8080 safe-restart
10. Tworzymy katalog na projekt.
a. /home/maciej/jenkins
b. git clone https://github.com/camel99/jenkins.git
c. cd jenkins
d. git checkout develop -> tworze sobie branch develop
11. Edytujemy joba w Jenkinsie:
a. mozna sprobowac zrobic job jako kopia joba. czyli new item-> nazwa -> kopiuj z istniejącego item i tu podac php-template, jesli 
wykonano pkt 6e.
b. w source podajemy adres gita: https://github.com/camel99/jenkins.git
c. Ustawienie kluczy SSH:
 # sudo jenkins
 # cd /var/lib/jenkins
 # ls -al szukamy katalogu .ssh, jesli go nie ma to tworzymy jako: mkdir .ssh 
 # cd .ssh
 # ssh-keygen -t rsa -C "maciej.kamela@wp.pl" UWAGA! generujac klucz robimy caly czas Enter, nie podawac "passphrase" (ma byc puste)
 # ls -al powinien byc pliki id_rsa (prywatny) id_rsa.public (publiczny)
 # mozna sprobowac wyedytowac plik id_rsa.public i podac klucz do projektu nse-client
 # cat id_rsa.public i klucz kopiujemy w ustawienia githuba, w ustawieniach SSH
 
**************************************************************
II.GITHUB
1. Zakładamy repo na stronie https://github.com/camel99/php.git
2. gdzie koncowka php.git oznacza nazwę repozytorium
3. dodajemy zdalne repo git remote add origin https://github.com/camel99/php.git
4. sprawdzamy dane o repo git remote -v i sprawdzamy czy śa dane do fetch i pull
5.możemy zrobić fetcha z repo jako hit fetch, jesli nie zadziała robimy najpierw pull'a: git pull
6. robimy pusha do repo git push
2.moje repo 'php' ma skrót 'maciej', czyli zamiast git fetch https://github.com/camel99/php.git moge zrobic git fetch maciej.
3.git remote -v sprawdza nazwe repo
4.dodawanie zdlanego repo: git remote origin https://github.com/camel99/php.git
5.wypychanie zmian do zdlanego repo : git push origin master

III. PHP, GIT, APACHE, 
1. INSTALACJA PHP, phpMyAdmin, oraz git
https://ask.fedoraproject.org/en/question/53827/howto-install-laravel-and-apache-on-fedora/

$ sudo yum install httpd phpMyAdmin git
2.Start apacha
$ sudo service http start
3.Automatyczne starowanie apacha z systemem:
$ sudo systemctl enable httpd.service
4.Anulowanie odpalania Apacha z systemem
sudo systemctl disable httpd.service
5. Instalacja composer'a
$ curl -sS https://getcomposer.org/installer | php
6. START/STOP Apacha
apachectl start/stop/restart/status
6. Sprawdzenie czy composer jest OK
. sprawdzanie czy Apache jest odpalony : systemctl is-active httpd.service
7. sprawdzenie dokłądniejsze działania Apacha systemctl status httpd.service

=> var_export
=> trigger_error
=> property_exists
=> tablice: uzywaj <pre> </php print_r(nazwa_tablicy)?></pre> do lepszego wyświeltenia danych
=> funkcja zwraca tylko jedna wartość więc, jeśli chcesz zwrócic więcej wartości to wrzuć je do tablicy: czyli return x; return y; jest błedne! trzeba zrobić return array(x,y);
=> używaj list
=> $methods=  get_class_methods('nazwa_klasy');)-> zwraca metody klasy w postatci tablicy
=> $classes=  get_declared_classes();-> zwraca zadeklarowane klasy, moje plus wbudowane
=> method_exists('nazwa_klasy','nazwa_metody') -> sprawdza czy istnieje metoda wew klasy=> $czyJestMetoda=method_exists('Person', 'say_hello')?  "metoda istnieje": "brak takiej metody";
=> get_class('nazwa_obiektu_klasy')-> zwraca nazwe klasy, której jest biekt
=> is_a('nazwa_obiektu','nazwa_klasy') -> sprwadza czy obiekt, jest obiektem danej klasy => $obiektKlasy=is_a($person, 'Person')?"jestem obiektem klasy Person":"nie jestem obiektem klasy Person";
=> $this -> słuzy do wywoływania metod, var, ale tylko wewnątrz klasy, czyli $this to niezainicjowany jeszcze obiekt klasy
=> get_class_vars('Nazwa_klasy') -> zwraca atrybuty klasy
=> STATYCZNE zmienne:=> echo nazwa_klasy (lub self):: Nazwa_atrybutu np. klasa Person, atrybut static $totalStudents=0, echo Person:: $totalStudents
=> w statycznych funkcjach nie można używać $this odwołując się do var typu "static". Statyczne metody wołają tylko statyczne zmienne!
=> słowo kluczowe "parent" uzywamy gdy przy dziedziczeniu dana klasa potomna chce sie odwołać do metod klasy po której dziedziczy

IV. INTELI J IDEA
http://tutorialforlinux.com/2014/01/03/how-to-install-intellij-idea-13-on-fedora-20-3264bit-linux-easy-guide/
1. Pobrac plik z https://www.jetbrains.com/idea/download/download_thanks.jsp
2.Dwuklik na pliku

V. BEHAT
http://docs.behat.org/en/v2.5/quick_intro.html#installation

=> bin/behat --name Nazwa_tagu ----dry-run --append-snippets -> dodaje funkcje do feature 
=> zamiast ciagle uzywać kroku z logowaniem można napisac funkcje i potem pisac już: 
GIVEN I am logged in "homepage" lub użyć BACKGROUND
=> używanie tagów do grupowania feature i scenario
=> SCENARIO OUTLINES
zamiast pisać kilka razy to samo można użyć scenario outline:
Scenario Outline: Eating
Given there are <start> cucumbers
When I eat <eat> cucumbers
Then I should have <left> cucumbers
EXAMPLES:
| start | eat | left 
| 12    | 5   | 7
| 20    | 5   | 15
wszystko pomiędzy < > jest traktowane jako placeholder (jako zmienna) i jest zastępowane danymi z sekcji EXAMPLES (poza 1 wierszem)
=> Używaj table. Nie myl ich ze SCENARIO OUTLINE
=> tagi oddziela się spacjami @tag1 @tag2 @tag3
=> komentarz we feature musi miec format :
/**
* @When I do something with :methodargument
*/

VI. LINUX
1. Sprawdzenie aktywnych procesów.
systemctl list-units --type=service
locate bashrc -> pokazuje lokalizacje pliku

VII.PHP
1. sprawdzanie czy serwer jest odpalony : systemctl is-active httpd.service
2. sprawdzenie dokładniejsze systemctl status httpd.service

INSTALACJA PHP, phpMyAdmin, oraz git
1. https://ask.fedoraproject.org/en/question/53827/howto-install-laravel-and-apache-on-fedora/

$ sudo yum install httpd phpMyAdmin git
2.Start apacha
$ sudo service http start
3.Automatyczne starowanie apacha z systemem:
$ sudo systemctl enable httpd.service
4. Instalacja composer'a
$ curl -sS https://getcomposer.org/installer | php
5. Sprawdzenie czy composer jest OK
6. sprawdzanie czy Apache jest odpalony : systemctl is-active httpd.service
7. sprawdzenie dokłądniejsze działania Apacha systemctl status httpd.service

VIII. GIT
http://git-scm.com/docs/git-stash
http://readwrite.com/2013/10/02/github-for-beginners-part-2
http://alblue.bandlem.com/Tag/git/
http://longair.net/blog/2009/04/16/git-fetch-and-merge/ fajny o pull i fetch
http://www.vogella.com/tutorials/Git/article.html#setup_rebase - bardzo fajna stronka
http://www.vogella.com/tutorials/Git/article.html#git_addtorepository


1.INSTALACJA
yum install curl-devel 
yum install expat-devel 
yum install gettext-devel 
yum install openssl-devel 
yum install zlib-devel
yum install git-core gitweb
2.POLECENIA
=> shutdown zamkniecie LINUXA
=> logout wylogowanie
=> su root potem haslo - zmiana uzytkownika
=> cat ~/.gitconfig
=> Creating GIT repository => => => 
=> mkdir project
=> cd project
=> git init
=> git add "nazwa pliku" dodanie do śledzenia
=> git diff co zostało zmienione w pliku
=> git diff --cached bardziej szczegółowe
=> git diff --unified=10 -> zwieksza liczbe wyswietlanych wierszy z 3 do 10
=> git log historia zmian w plikach
=> git log -p
=> git log -p-2 - pokazuje 2ostatnie zmiany
=> git log --stat - pokazuje tez statystyki
=> git log --pretty=online/short/full/fuller/format - pokazuje dokladne zmiany
=> git log --nazwa_pliku -> wyswietli rewizje, ktora zmienila plik
=> git commit -m "komentarz" - zatwierdzenie z komentarzem
=> git commit -a - zatwierdzenia z pominięciem poczekalni
=> git reset HEAD "nazwa pliku" - usuwanie pliku z poczekalni
=> git remote - wyswietlanie zdalnych repozytoriów
=> git remote -v wyswietla dodatkowo zapamietany skrót
=> git remote add [skrót] [url] dodawanie zdalnego repozytorium
=> git fetch [nazwa zdalengo repo] pobieranie danych z repozytorium
=> git fetch origin pobierze każdą nową pracę jaka została wypchnięta na oryginalny serwer od momentu sklonowania go przez ciebie
=> git pull automatycznie popbiera i merguje  dane z lokalnymi plikami
=> git config --global credential.helper cache ->>>>>> aby nie trzeba było podawac hasła przy pushu
=> git remote show origin  
=> git blame [filename] - pokazuje zmiany w pliku, # git blame shows the author and commit per line of a file
=> git shortlog 
=> git shortlog -s -n -> sprawdza uczestnikow projektu
=> git shortlog -s -n | wc -1 -> sprawdza liczbe uczestnikow projektu
=> gitk i git gui


3. Wyświetlanie nazwy brancha w prompt:
	http://fedoraproject.org/wiki/Git_quick_reference
1.To enable this, you can take advantage of the __git_ps1 function, provided by /usr/share/git-core/contrib/completion/git-prompt.sh in the git package. 
Add this these 4 lines to ~/.bashrc (będąc sudo):
			export PS1='[\u@\h \W$(declare -F __git_ps1 &>/dev/null && __git_ps1 " (%s)")]\$ '
			source /usr/share/git-core/contrib/completion/git-prompt.sh
			export GIT_PS1_SHOWDIRTYSTATE=true
			export GIT_PS1_SHOWUNTRACKEDFILES=true
To activate bash configuration changes, run source ~/.bashrc. 
2. Lepiej do pliku .bashrc dodać:(plik znajduje sie w /etc/bashrc => locate bashrc
	source /usr/share/git-core/contrib/completion/git-prompt.sh
	export GIT_PS1_SHOWDIRTYSTATE=true
	export GIT_PS1_SHOWUNTRACKEDFILES=true
    # git auto completion
    source /etc/bash_completion.d/git
    # function to display whether there are uncommitted changes or not
    function parse_git_dirty {
    [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] 
    }
    #show branch in prompt
    export PS1='[\u@\h \W]\[\033[31m\]$(__git_ps1 "(%s$(parse_git_dirty))")\[\033[01;34m\]$\[\033[00m\] '
	
3. CLONING GIT directory
=> git remote -> sprawdza skonfigurowanie serwery
=> git remote -v -> sprawdza skonfigurowanie serwery+nazwa skrótu
# Clone using git protocol
=> git clone git://github.com/drupal/drupal.git
# Clone using http protocol
=> git clone http://github.com/drupal/drupal.git
# Git protocol is more efficient for cloning. But in the end you will get same thing.
=> git remote add [skrót] [url] -. dodawania zdalnego repozytorium
=> git fetch [nazwa-zdalengo-repozytorium] -> pobieranie danych z repozytorium

4. ZMIANY W PLIKU
=> git checkout --nazawaPliku - cofa zmiany w pliku
=> git reset HEAD --nazwaPliku -usuwanie pliku z poczekalni
=> git push [nazwa-zdalnego-repo] [nazwa-gałęzi]
git remote show [nazwa-zdalnego-repo] - Inspekcja zmian w repozytorium
=> git remote rename staraNazwa NowaNazwa - zmiana nazwy repo zdalnego
alt+F2 gnome-terminal - otwieranie nowego terminala
=> citool - yum install git-gui a potem juz tylko git citool
=> git fetch origin - pobierze każdą nową prace jaka została wypchnieta na oryginalny serwer od momentu sklonowania go przez ciebie (lub ostatniego pobrania zmian).
/home/maciej/Dokumenty'
=> git diff HEAD
=> git diff --staged
=> gitk -kolorowe http://rogerdudler.github.io/git-guide/
=> git branch nazwa -tworzenie nowej gałęzi
=> git checkout nazwa - wchodzenie na nową gałąź
=> git checkout -b nazwa -tworzenie i wchodzenie na nowa gałąź 'nazwa'

5. MERGOWANIE
a.Nalezy z gałęzi 'testy' przejść na master => git checkout master
b.Następnie robimy merga gałęzi 'testy' z 'master' => git merge testy
c. Jeśli gałęź 'tetsy' nie jest juz potrzebna usuwa się ją:=> git branch -d testy, po mergu wskaźnik master wskazuje na migawke wskzaywana przez gałąź master
d.Aby scalić swoja tesową gałąź z gałęzią master robimy z pozimou tej testowej gałęzi merga=> git merge master
e. narzędzie graficzne do mergowania=> git mergetool

6. Tworzenie zdalnego repozytorium=>=>=>=>=>=>=>=>=>
=> touch README.md
=> git init
=> git add README.md
=> git commit -m "first commit"
=> git remote add origin https://github.com/camel99/konfiguracje.git
=> git push -u origin master

7. Polecenia różne

Dodanie aliasów do pliku ~/.bashrc :
alias gs="git status"
alias gd="git diff"
alias gsh="git stash"
alias gshp="git stash pop"
alias gpr="git pull --rebase"
alias gbv="git branch -vv"
alias gl="git log"
alias gc.="git checkout ."
alias gau="git add -u"
alias gcm="git checkout master"
alias glp="git log --pretty=format:'%Cred%h%Creset %d%Creset %s %Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit"
alias glo="git log --graph --decorate --oneline --abbrev-commit --all"

=> vim .gitignore i w środku dodac pliki ktore maja byc ignorowane
=> git ls-tree HEAD
=> git ls-tree master <nazwaKatlogu> wyswietla zawartosc katalogu, ekploracja katalogu
=> git log --oneline
=> git log --until="3 days"
=> git log --author="Maciej"
=> git log --grep="temp" poszuka commitów zawierających slowo temp
=> git log -p
=> git log --stat --summary
=> git log --format=fuller
=> git log --graph
=> git log --oneline --graph --all --decorate
=> git log --pretty=format:'%Cred%h%Creset %d%Creset %s %Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit 
=> git show <trzeba podac sha np. z git log --oneline>
=> git config --global alias.logg "log --graph --decorate --oneline --abbrev-commit --all" ->>>> alias
=> git tag -> wyświetla liste tagów
=> git describe --tags -> pokazuje tagi
=> git show -s nazwa_taga -> szczegolowe dane o tagu
=> git tag 1.2 -m"wydanie 1.2" -> taguje zmiane z komunikatem 
=> git tag -a Nazwa -m Komentarz
=> git show 1.2 -> show the tag
=> git checkout <tag_name>  -> przechodzenie na wersje z tag'a
=> git reflog -> sprawdza zawartość dziennika 
=> git revert --no-edit SSH commita -> wycofuje zmiane
=> git fetch nazwa_repo_zdalnego nazwa_galezi_zdalnej -> pobiera rewizje ze zdalnej galezi np. git fetch origin master,
   samo git fetch pobiera zmiany z galezi ustawionej jako trackowana komenda --set-upstream. 
   Aby dołaczyc pobrane rwizje trzeba zrobić: git merge repo_zdalne/galęź_zdalna
=> By default the git push command does not transfer tags to remote repositories. 
   You explicitly have to push the tag with the following command. 
	# push a tag or branch called tagname
	git push origin [tagname]

	# to explicitly push a tag and not a branch 
	git push origin tag <tagname>

	# push all tags
	git push --tags 

8. BRANCHES
http://longair.net/blog/2009/04/16/git-fetch-and-merge/
https://www.atlassian.com/git/tutorials/syncing/git-fetch

=> git branch
=> git branch nowa tworzy branch
=> ls -la .git/refs/heads  pokazuje branche
=> git checkout <nazwa brancha>
=> git diff --color-words master..nowa
=> git branch –merged pokazuje ktora gałąż jest całkowicie zmergowana
=> git branch –m stara_nazwa nowa_nazwa  zmienia nazwe brancha
=> git merge --abort przerwanie mergowania gdy wystąpia konflikty
=> git branch -r pokazuje zdalne gałęzieq
=> git branch -a pokazuje wszystkie gałęzie
=> git log --oneline origin/master pokazuje zmiany na zdalnym repo
=> git branch -r pokazuje zdalne gałęzie
=> git branch -a
=> git branch --set-upstream galaz_lokalna galaz zdalna -> trackowanie brancha
=> git push origin --delete nazwa_zdalnego_brancha  ->>>>>>>>>> usuwa zdalny branch
=> You mostly do with remote-tracking branches is one of the following:

    Update them with git fetch
    Merge from them into your current branch
    Create new local branches based on them
=> Creating local branches based on remote-tracking branches

If you want to create a local branch based on a remote-tracking branch 
(i.e. in order to actually work on it) you can do that with git branch –track or git checkout –track -b, which is similar but it also switches 
your working tree to the newly created local branch. For example, if you see in git branch -r that there’s a remote-tracking branch called origin/refactored that you want, 
you would use the command: git checkout --track -b refactored origin/refactored

9. FLOW pracy
zdalna gałęż o nazwie test
a. sprawdzenie zdalnych gałęzi: git fetch
b. stworzenie lokalnej gałęzi na podstawie zdalnej i sledzenie tej zdalnej: git branch -r potem git checkout --track -b test origin/test
c.aktualizacja gałęzi na podstawie origin: będąc na gałęzi test robimy git fetch origin
d. Aktualizacja lokalneg mastera:
git fetch doesn’t touch your working tree at all, so gives you
a little breathing space to decide what you want to do next. 
To actually bring the changes from the remote branch into your working tree,
you have to do a git merge. 
So, for instance, if I’m working on “master” (after a git checkout master) then I can merge in the changes 
that we’ve just got from origin with:  git merge origin/master
e.If instead you just wanted to see what the differences are between your branch and the remote one, 
you could do that with:  git diff master origin/master
f. Pushing your changes to a remote repository
How about the other way round? Suppose you’ve made some changes to the branch “experimental” 
and want to push that to a remote repository called “origin”. This should be as simple as:  git push origin experimental
To set up a local branch with a different name than the remote branch, you can easily use the first version with a different local branch name:
$ git checkout -b sf origin/serverfix
Branch sf set up to track remote branch serverfix from origin.
Switched to a new branch 'sf'.Now, your local branch sf will automatically pull from origin/serverfix.
If you already have a local branch and want to set it to a remote branch
you just pulled down, or want to change the upstream branch you’re tracking, 
you can use the -u or --set-upstream-to option to git branch to explicitly set it at any time.
$ git branch -u origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.

10.FLOW w PRACY
http://push.cwcon.org/learn/squashing-commits.html
http://makandracards.com/makandra/527-squash-several-git-commits-into-a-single-commit

a. Chlopacy tworza zdalny branch dla historyjki o nazwie NSEST-XX
b. Do w/w brancha pushuja swoje zmiany na branchach devovskich.
c. QA robią git checkout --track -b NSEST-XX origin/NSEST-XX tak aby śledzić zdalny branch dla historyjki
d. Codziennie (kilka razy dziennie robimy lokalnie z tej gałęzi git fetch a potem git merge origin/NSEST-XX (lub zamiast fetch i merge
   robimy git pull)
e. Z poziomu lokalnego mastera codzinnie (lub kilka razy dziennie) robimy git fetch a potem git merge origin/master (lub git pull)
f. Jak robimy na masterze git fetch to powinno sie pojawic: Unpacking objects: 100% (4/4), done.
   From https://github.com/camel99/behat
   bab6d4f..a9fbd86  master     -> origin/master
   wtedy mozna sprawdzic git show a9fbd86 co przyszlo ze zdalnego mastera. Jesli bedzie OK wtedy
   robimy git merge origin/master tak aby miec swiezego mastera (lub git pull)
g. Wypychanie zmian: będąc na branchu NSEST-XX robimy git fetch a potem git push origin (jesli z jakiegos powodu 
   nasz lokalny branch ma inną nazwę niż zdalny to robimy git push origin HEAD:nazwa_zdalnego_brancha
h. git remote show origin pokazuje konfiguracje śledzenia/pushowania

11. MERGOWANIE COMMITÓW 
a. Mergowanie wielu commitów: robimy git rebase -i HEAD~x gdzie x oznacza liczbe commitów które chcemy zmergowac w jeden, np x=4.
b. powinien otworzyc sie edytor z wpisami podobnymi do tych:
	pick 8ca46ba Initial draft of article
	pick 74abb12 Reworking introductory paragraphs
	pick 02221a7 Changes to match the Push style guide
	pick ddef6dd Completed article for submission to Push
	Oraz informacja o dostepnych komendach.
c. Pierwszego picka zostawiamy a pozostałe zmieniamy w "squash"
d. Zapisujemy zmiany ":wq"
e. Powinien otworzyc sie edytor, w ktorym mozna zmienić nazwy dla commitów
f. WAŻNE nie używaj squash dla push'niętych juz commitów!!!Please do not squash commits that are already part of an open pull-request.
g. Używając gitk można łatwo przejrzec co zawiera commit

12. STASH

=> git stash save "zachowaj na pozniej"
=> git stash list ->>> lista zestashowanych
=> git stash show -p pokazuje co zawiera stash
           
IX. BEHAT and MINK

bin/behat --dry-run --append-snippets
bin/behat -di
bin/behat -dl
bin/behat --name ls
http://docs.behat.org/en/latest/guides/2.definitions.html

M I N K
https://github.com/Behat/en-mink.behat.org/blob/master/index.rst#form-field-manipulations

X. URUCHAMIANIE LOKALNIE TESTÓW
uruchamianie lokalnie testów, tak, żeby przeglądarka sie
uruchamiała:
a. otworzyc plik konfiguracyjny behat.base.yml 
b. z konsoli będąc w katalogu z selenium odpalamy:
   java -jar selenium-server-standalone-2.42.3.jar -Dwebdriver.chrome.driver=chromedriver
   pozwala  to sprawdzic adres lokalny kompa:http://127.0.0.1:4444/wd/hub
c. w części IOKI\FunctionalTestsBundle\Behat\MinkExtension:
   robimy po wpisie wd_host: '10.157.49.172:4444/wd/hub'
   ctrl+d i wpisujemy:(uwaga ba ilsoc spacji ipowinno byc 8)
   wd_host:  'http://127.0.0.1:4444/wd/hub'- jest to lokalny adres mojego PC
d. zakomentowac linie #wd_host: '10.157.49.172:4444/wd/hub'
e. odpalic selenium
f. odpalic test behata: bin/behat 
 
XI. PRACA

1. Screen lock
	1.1 sudo yum install xscreensaver 
	1.2 Ustawienia->Klawiatura->Skróty
	1.3 Dodajemy własny skrót o dowolnej nazwie z komendą: xscreensaver-command -lock
	1.4 Wygaszacz ekranu -> wybierz wygaszacz
	1.5 Działa

2. Skype
	2.1 wget http://download.skype.com/linux/skype-4.3.0.37-fedora.i586.rpm
	2.2 sudo yum install skype-4.3.0.37-fedora.i586.rpm

3. Google Chrome
	3.1 sudo vi /etc/yum.repos.d/google-chrome.repo
	3.2 w powyższym pliku dopisać:
		[google-chrome]
			name=google-chrome
			baseurl=http://dl.google.com/linux/chrome/rpm/stable/x86_64
enabled=1
gpgcheck=1
			gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub
	3.3 rpm --import https://dl-ssl.google.com/linux/linux_signing_key.pub
	3.4 sudo yum install google-chrome-stable

4. Java

Instalacja w jednej linii :$ su -c "yum install java-1.7.0-openjdk"
	4.1 pobierz javę z: http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html
	4.2 sudo su
	4.3 rpm -Uvh /path/to/binary/jdk-7u51-linux-x64.rpm
	4.4 alternatives --install /usr/bin/java java /usr/java/latest/jre/bin/java 200000
	4.5 alternatives --install /usr/bin/javaws javaws /usr/java/latest/jre/bin/javaws 200000
	4.6 alternatives --install /usr/lib64/mozilla/plugins/libjavaplugin.so libjavaplugin.so.x86_64 /usr/java/latest/jre/lib/amd64/libnpjp2.so 200000
	4.7 alternatives --install /usr/bin/javac javac /usr/java/latest/bin/javac 200000
	4.8 alternatives --install /usr/bin/jar jar /usr/java/latest/bin/jar 200000
5. PHP
	5.1 sudo yum install php-soap php-xdebug php-intl php-redis
	5.2 sudo pecl install zip
	5.3 sudo pear channel-discover pear.phpunit.de
	5.4 sudo pear channel-discover components.ez.no
	5.5 sudo pear channel-discover pear.symfony-project.com
	5.6 sudo pear install phpunit/PHPUnit
	5.7 phpunit --version

6. PHPBrew (do projektu nMEL jest potrzebny php w wersji 5.3.28, phpBrew umożliwia na przełączanie się pomiędzy wersjami php'a)
	6.1 curl -L -O https://github.com/phpbrew/phpbrew/raw/1.13.1/phpbrew
	6.2 chmod +x phpbrew
	6.3 sudo mv phpbrew /usr/bin/phpbrew
	6.4 vi /etc/profile.d/phpbrew.sh – zawartość:
		export PHPBREW_ROOT=/opt/phpbrew
		export PHPBREW_HOME=/opt/phpbrew
		source $PHPBREW_HOME/bashrc
	6.5 source /etc/profile.d/phpbrew.sh
	6.6 phpbrew init
	6.7 source /etc/profile.d/phpbrew.sh
	6.8 phpbrew install 5.3.28 +default+phar+pcre+icu+iconv+ftp+gd+intl+dbs+apxs2+exif+gettext+openssl+tidy+soap -- --with-libdir=lib64 --with-freetype-dir=/usr/include/freetype2
	6.9 phpbrew switch 5.3.28
	6.10 sudo /opt/phpbrew/php/php-5.3.28/bin/pear config-set auto_discover 1
	6.11  sudo /opt/phpbrew/php/php-5.3.28/bin/pear install pear.phpunit.de/PHPUnit
6.12 sudo vim /opt/phpbrew/php/php-5.3.28/etc/php.ini – modyfikacja (w razie potrzeby odkomentować)
		memory_limit = 1024444M
		date.timezone = Europe/Warsaw
		pdo_mysql.default_socket=/var/lib/mysql/mysql.sock
	
7. Redis
	7.1 sudo yum install redis
	7.2 sudo systemctl enable redis
	7.3 sudo systemctl enable httpd
	7.4 sudo systemctl enable mariadb
	7.5 sudo systemctl start redis
	7.6 sudo systemctl start httpd
	7.7 sudo systemctl start mariadb

7. PhpMyAdmin
	7.1 sudo yum install phpmyadmin
	7.2 sudo gedit /etc/phpMyAdmin/config.inc.php
	7.3 Do powyższego pliku dodać/zmodyfikować
		$cfg['Servers'][$i]['socket']	= '/var/lib/mysql/mysql.sock';
		$cfg['Servers'][$i]['connect_type'] = 'http';

8. MySQLWorkbench
	8.1 pobrać ze strony
	8.2 sudo yum install ctemplate tinyxml vsqlite++ compat-lua-libs
8.3 sudo rpm -i /home/jacekblendowski/Pobrane/mysql-workbench-community-6.1.7-1.fc20.x86_64.rpm

9. Code-sniffer
sudo su
pear install PHP_CodeSniffer
pear config-show | grep php_dir
cd /opt/phpbrew/php/php-5.3.28/lib/php
cd PHP/CodeSniffer/Standards/
git clone https://github.com/radepal/Symfony2-coding-standard.git Symfony2
phpcs --config-set default_standard Symfony2

10. nMEL Project (informacje zebrane i uszczegółowione na podstawie tej strony )
	10.1 Keygen - http://confluence.ioki.com.pl/display/nMEL3/Gerrit – zakładanie konta pkt 2 i 			3, wyślij klucz publiczny Grzegorzowi abyś miał dostęp do wszystkich 				zasobów dla projektu, po nadaniu dostępów
	10.2 git clone ssh://uzytkownik_ioki@gerrit.ioki.com.pl:29418/newngmel.git
	10.3 są potrzebne dwie bazy: <nazwa_uzytkownika>_ngml i 							<nazwa_uzytkownika>_ngml_content w tym celu
		10.3.1 sudo service mysqld start
		10.3.2 mysql -u root
		10.3.3 create database <nazwa_uzytkownika>_ngml;
		10.3.4 create database <nazwa_uzytkownika>_ngml_content;
		10.3.5 create user user;
		10.3.6 grant all on <nazwa_uzytkownika>_ngml.* to 'user'@'localhost' identified by 'password';
		10.3.7 grant all on <nazwa_uzytkownika>_ngml_content.* to 'user'@'localhost' identified by 'password';
	10.4 W projekcie tworzymy dwa katalogi i dajemy im uprawnienia
		10.4.1 mkdir app/cache
		10.4.2 mkdir app/logs
		10.4.3 chmod 0777 -R app/cache app/logs
	10.5 W parameters.ini dodajemy root_url
			root_url = "http://localhost/newngmel/web"
	10.6 ./configure_script.sh --prod-db-host=localhost –prod-db-port=3306 –prod-db-name=baza_ngml --prod-db-user=user --prod-db-password=password –content-db-name=baza_ngml_content;
	10.7 php app/console assetic:dump; php app/console assetic:dump –env=prod
	10.8 powiązanie do folderu /var/www/html (w ten sposób projekt może być w lokalnym folderze)
		sudo ln -s /home/jacekblendowski/Git/newngmel /var/www/html/newngmel
	10.9 Działa użytkownicy i hasła są tutaj, a adres jest taki: 							http://localhost/newngmel/web/app_dev.php/login

11. Behat config
	11.1 Przed wykonaniem instrukcji ze strony wykonaj: sudo yum install pv
11.2 Selenium-server-standalone pobieramy z głównej strony Selenium - najnowszą dostępną wersję
12. Konfiguracja GIT
git config --global user.email "dominika.jedrzejczak@pearson.com"
git config --global user.name "Dominika Jedrzejczak"

sudo yum install kdiff3

git config --global merge.tool kdiff3
git config --global diff.tool kdiff3


12. PHP CodeSniffer
http://pear.php.net/package/PHP_CodeSniffer/download/1.5.6
http://pear.php.net/manual/en/package.php.php-codesniffer.advanced-usage.php

a.pear uninstall PHP_CodeSniffer
b.pear install PHP_CodeSniffer-1.5.6 -- wyzsza wersja nie działa u mnie
c. polecenia:
i.$ phpcs -n /path/to/code/myfile.php
ii. $ phpcs --report=summary /path/to/code
iii.$ phpcs -n --report=summary /path/to/code
iv.$ phpcs /path/to/code/CodeSniffer -v
v.$ phpcs -i
vi.$ phpcs -s /path/to/code/myfile.php
vii.$ phpcs -a /path/to/code

13. Protractor & Cucumber
I. instalacja
a. Jeśli już nie działa
rm -rf should/
rm -rf cucumber/
rm -rf protractor/
rm -rf protractor-cucumber/
sudo npm -g rm cucumber
sudo npm -g rm protractor
sudo npm -g rm protractor-cucumber
sudo npm -g rm should
b. Czysta instalacja
npm install
sudo npm install -g cucumber
sudo npm install -g protractor
sudo npm install should
sudo npm install protractor-cucumber
cucumber.js
c. Sprawdzenie co zainstalowane lokalnie a co globalnie
npm list -g
npm list -g protractor-cucumber

14. Zmiana API w projekcie
w pliku MainContext trzeba zmienić API z dev na np. st => nie commituj tego pliku

document.querySelectorAll('#students-list-table tr').length

15. Virtualki
a. pobrac wirtualki ze strony https://www.modern.ie/en-us/virtualization-tools#downloads
b.instalacja virtualBoxa http://www.tecmint.com/install-virtualbox-on-redhat-centos-fedora/
c. odpalic virtualBox: VirtualBox
d.rozpakowany plik z wirtualką zaimportować http://www.maketecheasier.com/import-export-ova-files-in-virtualbox/
e. dodanie portu 9000: sudo firewall-config

16. Dodawanie raportów w Behat:
a. https://packagist.org/packages/emuse/behat-html-formatter
   https://github.com/dutchiexl/BehatHtmlFormatterPlugin/tree/master
b. dodanie do composer.json wpisu:
	"emuse/behat-html-formatter": "dev-master"
composer po instalacji sciagnie sobie z gita pakiet, który formatuje raport do postaci html
c. rm -rf vendors_behat/
	php composer.phar install
d. do pliku behat.yml dodaj
	emuse\BehatHTMLFormatter\BehatHTMLFormatterExtension:
	name: html
plik ma wyglądć tak:
  extensions:
    IOKI\FunctionalTestsBundle\Behat\MinkExtension:
      #base_url: 'http://stagensels.azurewebsites.net/'
      #base_url: 'http://devnselsqadd.azurewebsites.net'
      #base_url: 'http://testnsest.azurewebsites.net'
      base_url: 'http://localhost:9000'
    emuse\BehatHTMLFormatter\BehatHTMLFormatterExtension:
      name: html
e. testy puszczamy z dodaniem  -f html -o ./build
czyli:
bin/behat --tags 'catalogueTool' -f html -o ./build
f. weryfikacja raportu: w konsoli wpisujemy:
firefox ./build/report.html 
g. Raport podobny do tego z BEHAT 2.0
	cd vendors_behat/emuse/behat-html-formatter/
	git pull
	cd ../../..
	następnie dodajcie do pliku behat.yml renderer: Twig,Behat2. u mnie to wygląda tak:
    emuse\BehatHTMLFormatter\BehatHTMLFormatterExtension:
      name: html
      renderer: Twig,Behat2

17. Podłaczanie dysku z wymianą IOKI
a. z poziomu menadzera plików smb://iokiserver2/wymiana

18. Srodowisko na virtual box
a. zainstalowane:
Git -> trzeba skopiowac klucze na wirtualke, te które uzywasz normalnie do ściagania repozytoriow.
	Mozna zrobic z konsoli GITa ssh-keygen i w tym katalopgu zastapic wygenerowane klucze tymi uzywanymi w projekcie.
Source tree -> narzeðzie do zarządzania GITem
Visual studio Express -> 
a.nalezy otworzyc solucje "PearsonEnglish.LearningServices.sln".
b.w katalogu we.config w pliku web.NSE Debug.config odkomentować <add name=LearningServices" connectionString="metadata=res://*/DataContexts.LearningAervices.csdl|res .......> 
c.w katalogu we.config w pliku web.NSE Debug.config ( w pliku z punktu a) w connection string podać adres serwera (z MS management studio)
	"VIRT-DEV-N246\SQLEXPRESS" to nazwa mojej bazy danych.
d. z katalogu DataContext\NSE należy odpalić skrypty:
# NSELSSystemData.sql
# NSELSCourseData.sql
# TypeData.sql
# DBSchema.txt
e. w pasku narzedzi w oknie debug należy wybrać "NSES debug" i kliknąć zieloną strzałkę
MS Management Studio
MS server
19. Stawianie frontu lokalnego
Jeszcze raz przepis na stawianie lokalnego frontu:

Wymagane programy:
Local Frontend Env. Installation:

a. git and configure SSH key
b. node  - take newest (info: http://fedoraproject.org/wiki/Features/NodeJS)
    yum install nodejs
    yum install npm
c. grunt - (info: npm http://gruntjs.com/)
    sudo npm install -g grunt
    sudo npm install -g grunt-cli
d. bower http://bower.io/
        npm install -g bower
    sudo nr
e. rvm and ruby http://rvm.io/rvm/install required version ruby 1.9.3
    sudo apt-get install ruby-full
    rvm install 1.9.3
    rvm --default ruby-1.9.3
f. Compass (TEST THIS STEP)
    gem update --system
    gem install compass

g. UBUNTU: sudo apt-get install bundler

h. git clone <url>
i. go to application folder
    1. bundle install
    2. npm install
    3. dla pewności można zrobić bower install i potem grunt build i w dist powinna byc zbudowana wersja
j. Finally folder dist contains current build
    
k. Selenium Server (http://www.seleniumhq.org/download/)
l. chromedriver (https://code.google.com/p/selenium/wiki/ChromeDriver)

URUCHAMIANIE
Do uruchamiania potrzebane:
- git pull + lub pobranie z brancha
- czasem wiedza przełącznie sie na API (dev, test...) lub skrypt
- reczne manualna zdolnosci w postaci polecen: npm install, bower install, grunt, grunt build:test, grunt serve:dist
- LUB skrypt, który robi to co powyżej - prosze sie usmiechac 

Po przetestowaniu powyższych kroków lokalnym kompu prosze o dopisanie do confluence.

19. ZAKŁADANIE UZYTKOWNIKA W SSDS
http://newsdszone1.wsiqual.dom/standard/index.jhtml
159.182.18.91 	newsdszone1.wsiqual.dom
witryna do zaufanych
a. zakladamy uzytkownika tu https://159.182.18.91/
ale najpierw trzeba zedytować plik w Windows "C:\Windows\System32\drivers\etc\hosts"
i wkleic tam: 159.182.18.91	newsdszone1.wsiqual.dom
b. Nastepnie trzeba zalogować się credentialami nowego studenta przez bubla:
https://159.182.18.93 -> ten adres łaczy się z API denselsqa, jesli chcesz żeby dany student byl widzoczny na innej bazie/srodowisku to trzeba zrobić:
https://159.182.18.93/?redirecturl=http://localhost:9000 ten url(lub podac jakiś inny np ST) łaczy sie z API ustawionym w config.js i w ten sposób to APi 
jest aktualizowane nowym studentem














